cmake_minimum_required(VERSION 3.21)
message("Using toolchain file ${CMAKE_TOOLCHAIN_FILE}.")

########################################################################################################################
## Define project
########################################################################################################################
project(
        OBody
        VERSION 4.3.7.0
        DESCRIPTION ""
        LANGUAGES CXX)
set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_INTERPROCEDURAL_OPTIMIZATION ON)
set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_DEBUG OFF)

include(GNUInstallDirs)

configure_file(
        ${CMAKE_CURRENT_SOURCE_DIR}/cmake/version.rc.in
        ${CMAKE_CURRENT_BINARY_DIR}/version.rc
        @ONLY)

set(sources
        ${CMAKE_CURRENT_SOURCE_DIR}/src/API/PluginInterface.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/src/Body/Body.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/src/Body/Event.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/src/Papyrus/Papyrus.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/src/Papyrus/PapyrusBody.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/src/JSONParser/JSONParser.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/src/PresetManager/PresetManager.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/src/main.cpp

        ${CMAKE_CURRENT_BINARY_DIR}/version.rc)

source_group(
        TREE ${CMAKE_CURRENT_SOURCE_DIR}
        FILES
        ${sources})

########################################################################################################################
## Configure target DLL
########################################################################################################################
set(PROJECT_AUTHOR "Aietos")

find_package(pugixml REQUIRED)
find_package(RapidJSON CONFIG REQUIRED)
find_package(CommonLibSSE CONFIG REQUIRED)
find_package(ryml CONFIG REQUIRED)
find_package(boost_algorithm CONFIG REQUIRED)
find_package(boost_stl_interfaces CONFIG REQUIRED)
find_package(boost_unordered CONFIG REQUIRED)

add_commonlibsse_plugin(${PROJECT_NAME} SOURCES ${sources} AUTHOR ${PROJECT_AUTHOR})
add_library("${PROJECT_NAME}::${PROJECT_NAME}" ALIAS "${PROJECT_NAME}")

target_include_directories(${PROJECT_NAME}
        PRIVATE
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>
        $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/src>
        $<INSTALL_INTERFACE:src>)

target_include_directories(
        ${PROJECT_NAME}
        PUBLIC
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>)

target_link_libraries(
        ${PROJECT_NAME}
        PRIVATE
        ryml::ryml
        pugixml
        rapidjson
        Boost::algorithm
        Boost::stl_interfaces
        Boost::unordered)

target_precompile_headers(
        ${PROJECT_NAME}
        PRIVATE
        src/PCH.h)

install(TARGETS
        ${PROJECT_NAME}
        DESTINATION
        "${CMAKE_INSTALL_LIBDIR}")

set(DISTRIBUTION_DIR "${CMAKE_CURRENT_SOURCE_DIR}/contrib/Distribution/")
set(CONTRIB_IMAGES_DIR "${DISTRIBUTION_DIR}Images/")
set(CONTRIB_PROJECT_DIR "${DISTRIBUTION_DIR}/Plugin - ${CMAKE_BUILD_TYPE}/")
set(CONTRIB_COMMON_DIR "${DISTRIBUTION_DIR}/Common/")

add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E make_directory "${CONTRIB_PROJECT_DIR}"
        COMMAND ${CMAKE_COMMAND} -E make_directory "${CONTRIB_IMAGES_DIR}"
        COMMAND ${CMAKE_COMMAND} -E make_directory "${CONTRIB_COMMON_DIR}"
        COMMAND ${CMAKE_COMMAND} -E copy_if_different $<TARGET_FILE:${PROJECT_NAME}> "${CONTRIB_PROJECT_DIR}"
        COMMAND ${CMAKE_COMMAND} -E copy_if_different "${CMAKE_CURRENT_SOURCE_DIR}/Images/OBody NG Image.png" "${CONTRIB_IMAGES_DIR}"
        COMMAND ${CMAKE_COMMAND} -E copy_if_different "${CMAKE_CURRENT_SOURCE_DIR}/json schema/OBody_presetDistributionConfig_schema.json" "${CONTRIB_COMMON_DIR}")

if (${CMAKE_BUILD_TYPE} STREQUAL "Debug" OR ${CMAKE_BUILD_TYPE} STREQUAL "RelWithDebInfo")
    add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
            COMMAND ${CMAKE_COMMAND} -E copy_if_different $<TARGET_PDB_FILE:${PROJECT_NAME}> "${CONTRIB_PROJECT_DIR}")
endif ()

foreach (DEPLOY_TARGET $ENV{SkyrimPluginTargets})
    set(DEPLOY_TARGET_COMMON_DIR "${DEPLOY_TARGET}/${PROJECT_NAME} - ${CMAKE_BUILD_TYPE}/SKSE/Plugins/")
    message(STATUS "Adding deployment target ${DEPLOY_TARGET}.")

    add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
            COMMAND ${CMAKE_COMMAND} -E make_directory "${DEPLOY_TARGET_COMMON_DIR}"
            COMMAND ${CMAKE_COMMAND} -E copy_if_different "$<TARGET_FILE:${PROJECT_NAME}>" "${DEPLOY_TARGET_COMMON_DIR}"
            COMMAND ${CMAKE_COMMAND} -E copy_if_different "${CMAKE_CURRENT_SOURCE_DIR}/json schema/OBody_presetDistributionConfig_schema.json" "${DEPLOY_TARGET_COMMON_DIR}")

    if (${CMAKE_BUILD_TYPE} STREQUAL Debug OR ${CMAKE_BUILD_TYPE} STREQUAL RelWithDebInfo)
        add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
                COMMAND ${CMAKE_COMMAND} -E copy_if_different "$<TARGET_PDB_FILE:${PROJECT_NAME}>" "${DEPLOY_TARGET_COMMON_DIR}")
    endif ()
endforeach ()

include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/skse-fomod.cmake)

include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/compress-artifact.cmake)

include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/automatic-github-workflow-setup.cmake)